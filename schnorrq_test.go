package go_schnorrq

import (
	"encoding/hex"
	"fmt"
	"github.com/cloudflare/circl/ecc/fourq"
	"github.com/google/go-cmp/cmp"
	"testing"
)

func getPublicKey(sk [32]byte) ([32]byte, error) {
	var p fourq.Point

	p.ScalarBaseMult(&sk)

	pubKey := [32]byte{}
	p.Marshal(&pubKey)
	return pubKey, nil
}

func TestSign(t *testing.T) {

	expectedSignature := [64]byte{
		0x60, 0xce, 0xd0, 0x82, 0xa0, 0x31, 0xb8, 0x97,
		0x3c, 0x8b, 0x77, 0xe3, 0x9b, 0x07, 0x8c, 0x1e,
		0xd5, 0x1b, 0xac, 0xf5, 0x95, 0x03, 0xfd, 0x19,
		0xe8, 0x6c, 0x34, 0x0e, 0xc9, 0x0c, 0x85, 0xa7,
		0x37, 0x27, 0x53, 0xc3, 0x63, 0x4c, 0xcc, 0x88,
		0xcc, 0xfa, 0x9f, 0xd0, 0x17, 0xa8, 0x60, 0x59,
		0x02, 0xde, 0x96, 0xab, 0x0d, 0xba, 0x73, 0x24,
		0x01, 0x6a, 0xfe, 0x54, 0x52, 0x22, 0x11, 0x00,
	}

	message := [32]byte{
		0xa6, 0x82, 0x8f, 0xcb, 0x9b, 0x68, 0x6f, 0x08,
		0x74, 0x08, 0x57, 0x2b, 0xf3, 0x16, 0xe8, 0x9b,
		0x2d, 0x96, 0xfc, 0x48, 0x11, 0xb5, 0xd0, 0x75,
		0x4b, 0xfd, 0xbd, 0x5b, 0x8a, 0xd7, 0x76, 0x0d,
	}

	privateKey := [32]byte{
		0x62, 0x50, 0x6d, 0x37, 0x0a, 0x4e, 0x9f, 0x42,
		0x72, 0x02, 0x69, 0xc0, 0xc9, 0x73, 0xa5, 0x44,
		0xde, 0x0b, 0x65, 0x59, 0xbd, 0xa4, 0x6d, 0x1d,
		0x8d, 0xd2, 0xfc, 0xda, 0x9f, 0xe4, 0xfa, 0xda,
	}
	publicKey, _ := getPublicKey(privateKey)

	fmt.Printf("private: %s\n", hex.EncodeToString(privateKey[:]))

	fmt.Printf("public:  %s\n", hex.EncodeToString(publicKey[:]))

	sgn, _ := Sign(privateKey, publicKey, message)

	fmt.Printf("signature: %s\n", hex.EncodeToString(sgn[:]))

	if cmp.Diff(sgn, expectedSignature) != "" {
		t.Fatalf("Signature test failure! \nExpected: %s \nGot: 	  %s", hex.EncodeToString(expectedSignature[:]), hex.EncodeToString(sgn[:]))
	}

}

func TestVerify(t *testing.T) {

	signature := [64]byte{
		0x60, 0xce, 0xd0, 0x82, 0xa0, 0x31, 0xb8, 0x97,
		0x3c, 0x8b, 0x77, 0xe3, 0x9b, 0x07, 0x8c, 0x1e,
		0xd5, 0x1b, 0xac, 0xf5, 0x95, 0x03, 0xfd, 0x19,
		0xe8, 0x6c, 0x34, 0x0e, 0xc9, 0x0c, 0x85, 0xa7,
		0x37, 0x27, 0x53, 0xc3, 0x63, 0x4c, 0xcc, 0x88,
		0xcc, 0xfa, 0x9f, 0xd0, 0x17, 0xa8, 0x60, 0x59,
		0x02, 0xde, 0x96, 0xab, 0x0d, 0xba, 0x73, 0x24,
		0x01, 0x6a, 0xfe, 0x54, 0x52, 0x22, 0x11, 0x00,
	}

	message := [32]byte{
		0xa6, 0x82, 0x8f, 0xcb, 0x9b, 0x68, 0x6f, 0x08,
		0x74, 0x08, 0x57, 0x2b, 0xf3, 0x16, 0xe8, 0x9b,
		0x2d, 0x96, 0xfc, 0x48, 0x11, 0xb5, 0xd0, 0x75,
		0x4b, 0xfd, 0xbd, 0x5b, 0x8a, 0xd7, 0x76, 0x0d,
	}

	privateKey := [32]byte{
		0x62, 0x50, 0x6d, 0x37, 0x0a, 0x4e, 0x9f, 0x42,
		0x72, 0x02, 0x69, 0xc0, 0xc9, 0x73, 0xa5, 0x44,
		0xde, 0x0b, 0x65, 0x59, 0xbd, 0xa4, 0x6d, 0x1d,
		0x8d, 0xd2, 0xfc, 0xda, 0x9f, 0xe4, 0xfa, 0xda,
	}

	publicKey, _ := getPublicKey(privateKey)

	fmt.Printf("private: %s\n", hex.EncodeToString(privateKey[:]))

	fmt.Printf("public:  %s\n", hex.EncodeToString(publicKey[:]))

	fmt.Printf("message: %s\n", hex.EncodeToString(message[:]))

	fmt.Printf("signature: %s\n", hex.EncodeToString(signature[:]))

	err := Verify(publicKey, message, signature)

	if err != nil {
		fmt.Printf("Error: %s\n", err.Error())
	}

}
